JOINS :- 
JOINs are useful for allowing us to pull data from multiple tables. This is both simple and powerful all at the same time.
With the addition of the JOIN statement to our toolkit, we will also be adding the ON statement.
We use ON clause to specify a JOIN condition which is a logical statement to combine the table in FROM and JOIN statements.
    SELECT orders.*
    FROM orders
    JOIN accounts
    ON orders.account_id = accounts.id;
The table name is always before the period.
The column you want from that table is always after the period.
For example, if we want to pull only the account name and the dates in which that account placed an order, but none of the other columns, we can do this with the following query:
    SELECT accounts.name, orders.occurred_at
    FROM orders
    JOIN accounts
    ON orders.account_id = accounts.id;

Try pulling all the data from the accounts table, and all the data from the orders table.
	SELECT *      OR     orders.*, accounts.*
    	FROM accounts
    	JOIN orders
    	ON orders.account_id = accounts.id;

Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table.
	SELECT orders.standard_qty, orders.gloss_qty, orders.poster_qty, accounts.website, accounts.primary_poc
	FROM accounts
	JOIN orders
	ON orders.account_id = accounts.id;


























