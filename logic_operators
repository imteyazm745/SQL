Introduction to Logical Operators
In the next concepts, you will be learning about Logical Operators. Logical Operators include:
LIKE This allows you to perform operations similar to using WHERE and =, but for cases when you might not know exactly what you are looking for.
IN This allows you to perform operations similar to using WHERE and =, but for more than one condition.
NOT This is used with IN and LIKE to select all of the rows NOT LIKE or NOT IN a certain condition.
AND & BETWEEN These allow you to combine operations where all combined conditions must be true.
OR This allows you to combine operations where at least one of the combined conditions must be true.
The LIKE operator is extremely useful for working with text. You will use LIKE within a WHERE clause. 
The LIKE operator is frequently used with %. The % tells us that we might want any number of characters leading up to a particular 
set of characters or following a certain set of characters, as we saw with the google syntax above.

Q. Use the accounts table to find
1. All the companies whose names start with 'C'.
        SELECT name
        FROM accounts
        WHERE name LIKE 'C%';

2. All companies whose names contain the string 'one' somewhere in the name.
        SELECT name
        FROM accounts
        WHERE name LIKE '%one%';

3. All companies whose names end with 's'.
        SELECT name
        FROM accounts
        WHERE name LIKE '%s';

IN - In command allows us to filter data based on several possible values. IN requires single quotation marks around non-numerical data. 
note you can include an apostrophe by putting two single quotes together. For example, Macy's in our workspace would be 'Macy''s'.

Example 1
Select * from demo.accounts
Where name IN (‘Walmart’, ‘Apple’)

Example 2
Select * from demo.orders
Where account_id IN (1001,1021’)

Use the accounts table to find the account name, primary_poc, and sales_rep_id for Walmart, Target, and Nordstrom.
	select name,primary_poc,sales_rep_id
from accounts
where name in (Walmart','Target', 'Nordstrom');

Use the web_events table to find all information regarding individuals who were contacted via the channel of organic or adwords.
SELECT *
FROM web_events
WHERE channel IN ('organic', 'adwords');

NOT = Provides the inverse results for IN, LIKE, and similar operators.
The NOT operator is an extremely useful operator for working with the previous two operators we introduced: IN and LIKE. 
By specifying NOT LIKE or NOT IN, we can grab all of the rows that do not meet a particular criteria.
Use the accounts table to find the account name, primary poc, and sales rep id for all stores except Walmart, Target, and Nordstrom.
	select name,primary_poc,sales_rep_id
	from accounts
	where name NOT IN  (Walmart','Target', 'Nordstrom');

Use the web_events table to find all information regarding individuals who were contacted via any method except using organic or adwords methods.
SELECT *
FROM web_events
WHERE channel NOT IN ('organic', 'adwords');

Use the accounts table to find:

All the companies whose names do not start with 'C'.
	SELECT *
	FROM accounts
	WHERE name NOT LIKE 'C%';

All companies whose names do not contain the string 'one' somewhere in the name.
	SELECT name
	FROM accounts
	WHERE name NOT LIKE '%one%';

All companies whose names do not end with 's'.
	SELECT *
	FROM accounts
	WHERE name NOT LIKE '%s';
The AND operator is used within a WHERE statement to consider more than one logical clause at a time. Each time you link a new statement with an AND, 
you will need to specify the column you are interested in looking at. You may link as many statements as you would like to consider at the same time. 
This operator works with all of the operations we have seen so far including arithmetic operators (+, *, -, /). LIKE, IN, and NOT logic can also be linked together using the AND operator.

BETWEEN Operator
Sometimes we can make a cleaner statement using BETWEEN than we can using AND. Particularly this is true when we are using the same column for different parts of our AND statement. In the previous video, we probably should have used BETWEEN.

Instead of writing :
WHERE column >= 6 AND column <= 10
we can instead write, equivalently:
WHERE column BETWEEN 6 AND 10
 
select * from demo.orders
where  occured_at >= ‘2016-04-01’ AND occured_at <= ‘2016-10-04’
Order by occurred_at DESC

Write a query that returns all the orders where the standard_qty is over 1000, the poster_qty is 0, and the gloss_qty is 0.
	SELECT *
	FROM orders
	WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;


